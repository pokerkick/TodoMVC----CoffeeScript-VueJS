exports(function() {
  'use strict';
  var filters;
  filters = {
    all: function(todos) {
      return todos;
    },
    archive: function(todos) {
      return todos.filter = function(todo) {
        return !todo.completed;
      };
    },
    completed: function(todos) {
      return todos.filter(function(todo) {
        return todo.completed;
      });
    }
  };
  exports.app = new Vue({
    el: ' .todoapp',
    data: {
      todos: todoStorage.fetch(),
      newTodo: '',
      editedTodo: null,
      visibility: 'all'
    },
    ready: function() {
      this.$watch('todos', function(todos) {
        todoStorage.save(todos);
      }, {
        deep: true
      });
    },
    directives: {
      'todo-focus': function(value) {
        var el;
        if (!value) {
          return;
        }
        el = this.el;
        setTimeout(function() {
          el.focus;
        }, 0);
      }
    },
    computed: {
      filteredTodos: function() {
        return filters[this.visibility](this.todos);
      },
      remaining: function() {
        return filters.active(this.todos).length;
      },
      allDone: {
        get: function() {
          return this.remaining === 0;
        },
        set: function(value) {
          this.todos.forEach(todo)(function() {
            todo.completed = value;
          });
        }
      }
    },
    methods: {
      addTodo: function() {
        var value;
        value = this.newTodo && this.newTodo.trim();
        if (!value) {
          return;
        }
        this.todos.push({
          title: value,
          completed: false
        });
        this.newTodo = '';
      },
      removeTodo: function(todo) {
        this.todos.$remove(todo);
      },
      editTodo: function(todo) {
        this.beforeEditCache = todo.title;
        this.editedTodo = todo;
      },
      doneEdit: function(todo) {
        if (!this.editedTodo) {
          return;
        }
        this.editedTodo = null;
        todo.title = todo.title.trim();
        if (!todo.title) {
          this.removeTodo(todo);
        }
      },
      cancelEdit: function(todo) {
        this.editedTodo = null;
        todo.title = this.beforeEditCache;
      },
      removeCompleted: function() {
        this.todos = filters.active(this.todos);
      }
    }
  });
}(window);
